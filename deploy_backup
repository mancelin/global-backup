#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import argparse
from datetime import date
from os import path, system
import string
import subprocess
import tarfile
import random
import re


backup = ""
upercase_and_digits = string.ascii_uppercase + string.digits


def make_item_and_link(backup, line, debug = False):
  item_and_link = line.split(" -> ")
  link = ""
  if (len(item_and_link) == 1):  # no symlink
    dest = item_and_link[0]
  else:
    link = item_and_link[0].replace(" ", "\\ ")
    dest = item_and_link[1]
  dest = dest.replace(" ", "\\ ")
  origin = backup + dest
  if (debug):
    print("origin : {}".format(origin))
    print("dest : {}".format(dest))
    print("link : {}".format(link))
  return (origin, dest, link)

def deploy_backup_from_folder():
  with open(backup + "/.backuped") as f:
    for line in f:
      line = line.replace("\n", "")
      print(">> {}".format(line))
      (origin, dest, link) = make_item_and_link(backup, line)
      system("mkdir -p {}".format(path.dirname(dest)))
      system("cp -r {} {}".format(origin, dest))
      if (link != ""):
        print("Restoring symlink: {} -> {}".format(link, dest))
        system("mkdir -p {}".format(path.dirname(link)))
        system("ln -s {} {}".format(dest, link))

def random_string():
  return "".join(random.choice(upercase_and_digits) for _ in range(6))

def deploy_backup_from_targz():
  print("backup : {}".format(backup))
  tar = tarfile.open(backup, "r:gz")
  backup_no_targz = backup.replace(".tar.gz", "")
  member_backuped = tar.getmember(backup_no_targz + "/.backuped")
  print("member_backuped : {}".format(member_backuped))
  with tar.extractfile(member_backuped) as f:
    for line in f:
      line = line.decode("utf-8")
      line = line.replace("\n", "")
      print(">> {}".format(line))
      (origin, dest, link) = make_item_and_link(backup_no_targz, line, True)
      unescaped_origin = origin.replace("\\ ", " ")
      member = tar.getmember(unescaped_origin)
      print(member)
      rand_dirname = ""
      dirname = path.dirname(dest)
      system("echo -- mkdir -p {}".format(dirname))
      if (member.isfile()):
        print("------ FILE")
        # make tmp dir (verify it don't already exists)
        while True:
          rand_dirname = dirname + "_" + random_string()
          print("rand_dirname : {}".format(rand_dirname))
          if (not path.exists(rand_dirname)):
            break;
        system("echo -- mkdir -p {}".format(rand_dirname))
        # untar in tmp dir
        tar.extract(member, path=rand_dirname)
        rand_dirname_origin = rand_dirname + "/" + origin
        system("echo -- mv {} {}".format(rand_dirname_origin, dest))
        # rm tmp dir
        system("echo -- rm -rf {}".format(rand_dirname))
      elif (member.isdir()):
        print("------ DIR")
        while True:
          rand_dirname = dest + "_" + random_string()
          print("rand_dirname : {}".format(rand_dirname))
          if (not path.exists(rand_dirname)):
            break;
        system("echo -- mkdir -p {}".format(rand_dirname))
        # untar in tmp dir
#        tar.extract(member, path=rand_dirname)
        rand_dirname_origin = rand_dirname + "/" + origin
        parent_dest = path.dirname(dest)
        system("echo -- mkdir -p {}".format(parent_dest))
        system("echo -- mv {} {}".format(rand_dirname_origin, parent_dest))
        # rm tmp dir
        system("echo -- rm -rf {}".format(rand_dirname))
      if (link != ""):
        print("Restoring symlink: {} -> {}".format(link, dest))
        system("mkdir -p {}".format(path.dirname(link)))
        system("echo -- ln -s {} {}".format(dest, link))
  tar.close()



def help():
  help = """Use: deploy_backup [OPTION..] [BACKUP]
Deploy backup files and folders and restore symlinks.

Options:
  -h, --help            Display this help screen
"""
  print(help)


if __name__ == '__main__':
  # Use Custom Parser in order to display a better help screen
  class CustomParser(argparse.ArgumentParser):
    def format_help(self):
      help()
  parser = CustomParser()
  parser.add_argument("backup", help="Backup folder or file (.tar.gz)")
  args = parser.parse_args()
  backup = args.backup
  if (path.exists(backup)):
    if (path.isdir(backup)):
      print("Deploying backup from dir {}".format(backup))
      deploy_backup_from_folder()
    elif (path.isfile(backup) and bool(re.search("\.tar\.gz$", backup))):
      print("Deploying backup from .tar.gz file {}".format(backup))
      deploy_backup_from_targz()
    else:
      print("Error: \"{}\" is neither a folder or a .tar.gz".format(backup))
  else:
    print("Error: file \"{}\" don't exist".format(backup))

